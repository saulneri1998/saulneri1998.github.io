{"version":3,"sources":["Components/Header.js","atoms.js","Components/FileUpload.js","Components/ModelPick.js","Components/GenerateButton.js","Components/ImageResult.js","theme.js","App.js","serviceWorker.js","index.js"],"names":["Header","Heading","as","size","color","imageSizeState","atom","key","default","width","height","styleModelState","outputImageState","inputImageState","isLoadingState","FileUpload","useRecoilState","setImageSize","setIsLoading","inputImage","setInputImage","onDrop","useCallback","acceptedFiles","file","reader","FileReader","onabort","console","log","onerror","onload","e","Promise","resolve","a","img","Image","src","target","result","canvas","document","createElement","ctx","getContext","transformRatio","drawImage","dataurl","toDataURL","type","resizeImg","then","imgUrl","imgSize","readAsDataURL","useDropzone","getRootProps","getInputProps","content","alt","Stack","textAlign","shadow","Flex","align","justify","bg","border","borderRadius","borderColor","ModelPick","styleModel","setStyleModel","handleClick","model","getAttribute","flexWrap","p","value","onClick","m","rounded","process","GenerateButton","useState","modelLoaded","setModelLoaded","trainedModel","setTrainedModel","useRecoilValue","setOutputImage","useEffect","ml5","styleTransfer","trained","catch","err","Button","variantColor","variant","isDisabled","inputImg","transfer","ImageResult","outputImage","imageSize","isLoading","RenderImageSpinner","Spinner","thickness","speed","emptyColor","htmlWidth","htmlHeight","id","customTheme","theme","breakpoints","fonts","heading","body","mono","fontSizes","xs","sm","md","lg","xl","App","ThemeProvider","CSSReset","Divider","SimpleGrid","columns","spacing","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.758d91fa.chunk.js","sourcesContent":["import { Heading } from '@chakra-ui/core';\nimport React from 'react';\n\nconst Header = () => {\n    return(\n        <Heading as=\"h1\" size=\"2xl\" color=\"purple.600\">ml5 Style Transfer</Heading>\n    )\n}\n\nexport default Header;","import { atom } from 'recoil';\n\nexport const imageSizeState = atom({\n    key: 'imageSize', // unique ID (with respect to other atoms/selectors)\n    default: {\n        width: 0,\n        height: 0,\n    },\n});\n\nexport const styleModelState = atom({\n    key: 'styleModel', // unique ID (with respect to other atoms/selectors)\n    default: 'wave',\n});\n\nexport const outputImageState = atom({\n    key: 'outputImage', // unique ID (with respect to other atoms/selectors)\n    default: null,\n});\n\nexport const inputImageState = atom({\n    key: 'inputImage', // unique ID (with respect to other atoms/selectors)\n    default: null,\n});\n\nexport const isLoadingState = atom({\n    key: 'isLoading', // unique ID (with respect to other atoms/selectors)\n    default: false,\n});","import { Flex, Heading, Stack } from '@chakra-ui/core'\nimport React, {useCallback } from 'react'\nimport {useDropzone} from 'react-dropzone'\nimport { useRecoilState } from 'recoil';\nimport { imageSizeState, inputImageState, isLoadingState } from '../atoms';\n\nfunction FileUpload() {\n    const [, setImageSize] = useRecoilState(imageSizeState);\n    const [, setIsLoading] = useRecoilState(isLoadingState);\n    const [inputImage, setInputImage] = useRecoilState(inputImageState);\n    \n    const onDrop = useCallback((acceptedFiles) => {\n        const file = acceptedFiles[0];\n        const reader = new FileReader()\n        reader.onabort = () => console.log('file reading was aborted')\n        reader.onerror = () => console.log('file reading has failed')\n        reader.onload = (e) => {\n            resizeImg(file, e).then(([imgUrl, imgSize]) => {\n                setInputImage(imgUrl);\n                setImageSize(imgSize);\n                setIsLoading(true);\n            });\n        }\n        reader.readAsDataURL(file)\n    }, [setImageSize, setInputImage, setIsLoading])\n\n    const {getRootProps, getInputProps} = useDropzone({onDrop})\n\n    const content = inputImage == null ? \n        <p>Arrastra una imagen, o haz click para seleccionar</p> \n        : <img src={inputImage} alt=\"input_image\"/>;\n\n    return (\n        <Stack textAlign=\"center\">\n            <Heading shadow=\"sm\">Sube una imagen!</Heading>\n            <Flex {...getRootProps()}\n            height={300} \n            align=\"center\" justify=\"center\"\n            bg=\"gray.200\" color=\"gray.500\"\n            border=\"1px\" borderRadius=\"lg\" borderColor=\"gray.400\">\n\n                <input {...getInputProps()} />\n                { content }\n            </Flex>\n        </Stack>\n    );\n}\n\nfunction resizeImg(file, e) {\n    let promise = new Promise(async (resolve) => {\n        let img = new Image();\n        img.src = e.target.result;\n\n        img.onload = () => {\n            let canvas = document.createElement(\"canvas\");\n            let ctx = canvas.getContext(\"2d\");\n\n            const MAX_SIZE = 250;\n            const maxSide = img.width > img.height ? img.width : img.height;\n            const transformRatio = MAX_SIZE / maxSide;\n\n            canvas.width = img.width*transformRatio;\n            canvas.height = img.height*transformRatio;\n            ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n            const dataurl = canvas.toDataURL(file.type);\n            resolve([dataurl, {width: canvas.width, height: canvas.height}]);\n        }\n    })\n    return promise\n}\n\nexport default FileUpload;","import { Image, Flex, Stack, Heading } from '@chakra-ui/core';\nimport React from 'react';\nimport { useRecoilState } from 'recoil';\nimport { styleModelState } from '../atoms';\n \nconst ModelPick = () => {\n    const [styleModel, setStyleModel] = useRecoilState(styleModelState)\n\n    const handleClick = (e) => {\n        const model = e.target.getAttribute('value');\n        setStyleModel(model)\n    }\n\n    return(\n        <Stack textAlign=\"center\">\n            <Heading shadow=\"sm\">Selecciona un modelo!</Heading>\n            <Flex flexWrap=\"wrap\"\n            height={300}\n            bg=\"purple.200\" p=\"20px\" \n            borderRadius=\"lg\">\n                <Image \n                    value=\"wave\" onClick={ handleClick }\n                    border={styleModel === \"wave\" ? \"2px\" : 0} borderColor=\"purple.600\"\n                    m=\"10px\" size=\"110px\" rounded=\"lg\"\n                    src={process.env.PUBLIC_URL + '/models_images/wave.jpg'}\n                />\n                <Image \n                    value=\"udnie\" onClick={ handleClick }\n                    border={styleModel === \"udnie\" ? \"2px\" : 0} borderColor=\"purple.600\"\n                    m=\"10px\" size=\"110px\" borderRadius=\"lg\"\n                    src={process.env.PUBLIC_URL + '/models_images/udnie.jpg'}\n                />\n            </Flex>\n        </Stack>\n    );\n}\n\nexport default ModelPick;","import { Button } from '@chakra-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport ml5 from 'ml5';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { styleModelState, outputImageState, inputImageState, isLoadingState} from '../atoms';\n\nconst GenerateButton = () => {\n    const [modelLoaded, setModelLoaded] = useState(false);\n    const [trainedModel, setTrainedModel] = useState(null);\n    \n    const styleModel = useRecoilValue(styleModelState);\n    const inputImage = useRecoilValue(inputImageState);\n    const [, setOutputImage] = useRecoilState(outputImageState);\n    const [, setIsLoading] = useRecoilState(isLoadingState);\n    \n    useEffect(() => {\n        ml5.styleTransfer(process.env.PUBLIC_URL + '/models/' + styleModel)\n        .then(trained => {\n            setModelLoaded(true);\n            setTrainedModel(trained)\n        }).catch(err => console.log('Error:', err))\n    }, [styleModel])\n    \n    const generateImage = () => {\n        const inputImg = new Image()\n        inputImg.src = inputImage;\n        trainedModel.transfer(inputImg).then(result => {\n            setOutputImage(result.src)\n            setIsLoading(false);\n        }).catch(err => console.log('Error:', err));\n    }\n\n    return(\n        <Button \n            size=\"lg\" variantColor=\"purple\" variant=\"outline\"\n            isDisabled={!(modelLoaded && inputImage)}\n            onClick={ generateImage }\n        >\n                Generar\n        </Button>\n    )\n}\n\nexport default GenerateButton;","import { Flex, Image, Spinner } from '@chakra-ui/core';\nimport React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { imageSizeState, isLoadingState, outputImageState } from '../atoms';\n\nconst ImageResult = () => {\n\n    const outputImage = useRecoilValue(outputImageState);\n    const imageSize = useRecoilValue(imageSizeState);\n    const isLoading = useRecoilValue(isLoadingState);\n\n    const RenderImageSpinner = () => {\n        if (isLoading) {\n            return <Spinner\n                thickness=\"4px\"\n                speed=\"0.65s\"\n                emptyColor=\"gray.200\"\n                color=\"purple.500\"\n                size=\"xl\"\n            />\n        } else if (outputImage != null) {\n            return <Image src={ outputImage } \n                htmlWidth={ imageSize.width } htmlHeight={ imageSize.height }\n                alt=\"output\">\n            </Image>\n        }\n        return <></>\n    }\n\n    return(\n        <Flex id=\"output_image\" align=\"center\" justify=\"center\" p={10}>\n            <RenderImageSpinner />\n        </Flex>\n    )\n}\n\nexport default ImageResult;","import { theme } from \"@chakra-ui/core\";\n\nconst customTheme = {\n    ...theme,\n    breakpoints: [\"30em\", \"48em\", \"62em\", \"80em\"],\n    fonts: {\n        heading: '\"Avenir Next\", sans-serif',\n        body: \"system-ui, sans-serif\",\n        mono: \"Menlo, monospace\",\n    },\n    fontSizes: {\n        xs: \"0.75rem\",\n        sm: \"0.875rem\",\n        md: \"1rem\",\n        lg: \"1.125rem\",\n        xl: \"1.25rem\",\n        \"2xl\": \"1.5rem\",\n        \"3xl\": \"1.875rem\",\n        \"4xl\": \"2.25rem\",\n        \"5xl\": \"3rem\",\n        \"6xl\": \"4rem\",\n    },\n};\n\nexport default customTheme;","import React from 'react';\nimport { CSSReset, Divider, SimpleGrid, Stack, ThemeProvider } from '@chakra-ui/core';\nimport Header from './Components/Header';\nimport FileUpload from './Components/FileUpload';\nimport ModelPick from './Components/ModelPick';\nimport GenerateButton from './Components/GenerateButton';\nimport ImageResult from './Components/ImageResult';\nimport customTheme from './theme';\nimport { RecoilRoot } from 'recoil';\n\nfunction App() {\n  return (\n    <ThemeProvider theme={customTheme}>\n      <CSSReset />\n\n      <RecoilRoot>\n        <Stack p={10}>\n          <Header />\n          <Divider />\n          <SimpleGrid columns={2} spacing={30}>\n            <FileUpload />\n            <ModelPick />\n          </SimpleGrid>\n          <GenerateButton />\n          <ImageResult />\n        </Stack>\n      </RecoilRoot>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}